import React, { createContext, useState, useEffect } from "react";
import { authAPI } from "../services/api"; // authAPI ‡∂ë‡∂ö ‡∂±‡∑í‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í ‡∂∏‡∑è‡∂ª‡∑ä‡∂ú‡∂∫‡∑ô‡∂±‡∑ä import ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
export const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [auth, setAuth] = useState({ loading: true, user: null });

   const login = async () => {
    try {
      const res = await authAPI.getProfile();
      const userData = res.data.user;

      setAuth({ loading: false, user: userData });
      localStorage.setItem('user', JSON.stringify(userData));
      console.log("‚úÖ Loggin and fetch user data from server.");

    } catch (err) {
      console.error("Login successful, but failed to fetch profile:", err);
      setAuth({ loading: false, user: null });
    }
  };
  const logout = async () => {
    try {
      // Server-side logout request ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏
      await authAPI.logout(); 
      console.log("‚úÖ Logged out from server.");
    } catch (err) {
      console.error("‚ùå Failed to log out from server:", err);
    } finally {
      setAuth({ loading: false, user: null });
      localStorage.removeItem('user');
    }
  };

  useEffect(() => {
    const checkAuth = async () => {
      // ‡∂∏‡∑î‡∂Ω‡∑í‡∂±‡∑ä‡∂∏ local storage ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä user data ‡∂Ω‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
      const storedUser = localStorage.getItem('user');
      
      if (storedUser) {
        setAuth({ loading: false, user: JSON.parse(storedUser) });
      } else {
        // local storage ‡∂ë‡∂ö‡∑ö data ‡∂±‡∑ê‡∂≠‡∑í‡∂±‡∂∏‡∑ä, server ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä profile ‡∂ë‡∂ö fetch ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
        try {
          console.log("üîç Fetching user profile from backend...");
          const res = await authAPI.getProfile();
          const userData = res.data.user;
          setAuth({ loading: false, user: userData });
          localStorage.setItem('user', JSON.stringify(userData));
        } catch (err) {
          console.error("‚ùå Failed to fetch user profile:", err);
          setAuth({ loading: false, user: null });
        }
      }
    };
    
    checkAuth();
  }, []);

  return (
    <AuthContext.Provider value={{ ...auth, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};